// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../docs/database"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  USER
  SUPERUSER
  ADMIN
}

enum DepartmentType {
  IT
  SUPPORT
  NOC
  HR
  FINANCE
  MARKETING
  SALES
  CUSTOMER_SERVICE
}

enum StatusType {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  WAITING
}

enum ServiceType {
  AP
  PTP
  CP
}

enum capacityScaleType {
  MBPS
  GBPS
  TBPS
}

enum failureType {
  Electrical
  Frequency
  Hardware
  Software
}

enum severityType {
  Critical
  Major
  Minor
}

enum tagType {
  AP
  PTP
  CP
  Electrical
  Frequency
  Hardware
  Software
  Critical
  Major
  Minor
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  IT
  SUPPORT
  NOC
  HR
  FINANCE
  MARKETING
  SALES
  CUSTOMER_SERVICE
  MBPS
  GBPS
  TBPS
}

enum Permission {
  READ
  WRITE
  UPDATE
  DELETE
}

model User {
  id             String         @id @default(uuid())
  firstName      String
  lastName       String
  email          String         @unique
  password       String
  roleType       Role           @relation(fields: [role], references: [name])
  role           RoleType
  department     Department     @relation(fields: [departmentName], references: [name])
  departmentName DepartmentType
  createdAt      DateTime?      @default(now())
  updatedAt      DateTime?      @updatedAt
  tickets        Ticket[]       @relation("createdTickets")
  editedTickets  Ticket[]
  comments       Comment[]
}

model Role {
  id          String       @id @default(uuid())
  name        RoleType     @unique
  permissions Permission[]
  User        User[]
}

model Department {
  id        String         @id @default(uuid())
  name      DepartmentType @unique
  users     User[]
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
}

model Ticket {
  id          String       @id @default(uuid())
  title       String
  content     String
  type        failureType  @default(Electrical)
  severity    severityType @default(Minor)
  tags        tagType[]
  services    Service[]
  author      User         @relation("createdTickets", fields: [authorId], references: [id])
  authorId    String
  editors     User[]
  status      StatusType   @default(OPEN)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  firstReply  DateTime?
  closedAt    DateTime?
  timeToClose Int?         @default(0)
  comments    Comment[]
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  ticket    Ticket    @relation(fields: [ticketId], references: [id])
  ticketId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Service {
  id        String            @id @default(uuid())
  name      String
  type      ServiceType       @default(AP)
  code      String
  capacity  Int
  scale     capacityScaleType @default(MBPS)
  rs        RadioStation      @relation(fields: [rsId], references: [id])
  rsId      String            @default("1")
  owner     Client            @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime          @default(now())
  updatedAt DateTime?         @updatedAt
  tickets   Ticket[]
}

model Client {
  id        String    @id @default(uuid())
  name      String
  lastname  String
  email     String    @unique
  phone     String
  address   String
  services  Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model RadioStation {
  id            String      @id @default(uuid())
  name          String
  code          String
  city          String
  municipality  String
  coordinates   Coordinates @relation(fields: [coordinatesId], references: [id])
  coordinatesId String      @unique
  services      Service[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
}

model Coordinates {
  id        String        @id @default(uuid())
  latitude  String
  longitude String
  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt
  rs        RadioStation?
}
